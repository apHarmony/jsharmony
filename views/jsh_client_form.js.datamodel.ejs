/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/

//DataModel
(function(jsh){
  var $ = jsh.$;
  var _ = jsh._;
  var XExt = jsh.XExt;
  var XValidate = jsh.XValidate;
  var modelid = '<%=model.id%>';
  var xmodel = jsh.XModels[modelid];

  var xdatamodel = xmodel.datamodel = function(){
    var _this = this;
    this._is_insert = (xmodel.unbound?false:true);
    this._modelid = modelid;
    _.each(xmodel.fields, function(field){
      if(!field.name) return;
      try{ _this[field.name] = (field.hasDefault()?jsh.XFormat.Decode(field.format, field.getDefault(_this)):''); }
      catch(ex){ }
    });
    XExt.XModel.ApplyDefaults(this);
  }

  xdatamodel.prototype.Fields = xmodel.fields = {
    <% _.each(model.fields,function(field){ if(!('actions' in field)) return; if(field.control=='subform') return; if((field.control=='html') && ('value' in field)) return; if(!field.name) return; if(!field.control) return; %>
      "<%=field.name%>":new XExt.XModel.XField({"name":"<%=field.name%>",
      <%-xejs.iif('format' in field,'"format":'+JSON.stringify(field.format)+',') %>
      <%-xejs.iif('actions' in field,'"actions":'+JSON.stringify(field.actions)+',') %>
      <%-xejs.iif('readonly' in field,'"readonly":'+JSON.stringify(field.readonly)+',') %>
      <%-xejs.iif('control' in field,'"control":'+JSON.stringify(field.control)+',') %>
      <%-xejs.iif('always_editable' in field,'"always_editable":'+JSON.stringify(field.always_editable)+',') %>
      <%-xejs.iif('hints' in field,'"hints":'+JSON.stringify(field.hints)+',') %>
      <%-xejs.iif('unbound' in field,'"unbound":'+JSON.stringify(field.unbound)+',') %>
      <%-xejs.iif('locked_by_querystring' in field,'"locked_by_querystring":'+JSON.stringify(field.locked_by_querystring)+',') %>
      <%-xejs.iif('onchange' in field,'"onchange":'+JSON.stringify('(function(){'+jslocals+field.onchange+'}).call(this,obj,newval,undoChange,e)')+',') %>
      <%-xejs.iif('ongetvalue' in field,'"ongetvalue":function(val,field,xmodel,jctrl,parentobj){'+jslocals+field.ongetvalue+'},') %>
      <%-xejs.iif('onenabled' in field,'"onenabled":function(obj){'+jslocals+field.onenabled+'},') %>
      <%-xejs.iif('ondisabled' in field,'"ondisabled":function(obj){'+jslocals+field.ondisabled+'},') %>
      <%-xejs.iif('key' in field,'"key":'+JSON.stringify(field.key)+',') %>
      <%-xejs.iif('lovkey' in field,'"lovkey":'+JSON.stringify(field.lovkey)+',') %>
      <%-xejs.iif('value' in field,'"value":'+JSON.stringify(field.value)+',') %>
      <% if('default' in field){ %>"default":<%-XExt.XModel.ParseDefault(field.default, jslocals)%>,<% } %>
      controlparams:{
        <% if('controlparams' in field){ %>
          <%-xejs.iif('thumbnail_width' in field.controlparams,'"thumbnail_width":'+JSON.stringify(field.controlparams.thumbnail_width)+',') %>
          <%-xejs.iif('show_thumbnail' in field.controlparams,'"show_thumbnail":'+JSON.stringify(field.controlparams.show_thumbnail)+',') %>
          <%-xejs.iif('preview_on_click' in field.controlparams,'"preview_on_click":'+JSON.stringify(field.controlparams.preview_on_click)+',') %>
          <%-xejs.iif('expand_all' in field.controlparams,'"expand_all":'+JSON.stringify(field.controlparams.expand_all)+',') %>
          <%-xejs.iif('expand_to_selected' in field.controlparams,'"expand_to_selected":'+JSON.stringify(field.controlparams.expand_to_selected)+',') %>
          <%-xejs.iif('item_dropdown' in field.controlparams,'"item_dropdown":'+JSON.stringify(field.controlparams.item_dropdown)+',') %>
          <%-xejs.iif('lazy_render' in field.controlparams,'"lazy_render":'+JSON.stringify(field.controlparams.lazy_render)+',') %>
          <%-xejs.iif('onmove' in field.controlparams,'"onmove":function(dragval, dropval, anchor, e){'+jslocals+field.controlparams.onmove+'},') %>
          <%-xejs.iif('ondrop' in field.controlparams,'"ondrop":function(dropval, anchor, e){'+jslocals+field.controlparams.ondrop+'},') %>
          <%-xejs.iif('ongetnodecontent' in field.controlparams,'"ongetnodecontent":function(node, defaultval){'+jslocals+field.controlparams.ongetnodecontent+'},') %>
          <%-xejs.iif('drag_anchor_settings' in field.controlparams,'"drag_anchor_settings":'+JSON.stringify(field.controlparams.drag_anchor_settings)+',') %>
          <%-xejs.iif('value_true' in field.controlparams,'"value_true":'+JSON.stringify(field.controlparams.value_true)+',') %>
          <%-xejs.iif('value_false' in field.controlparams,'"value_false":'+JSON.stringify(field.controlparams.value_false)+',') %>
          <%-xejs.iif('value_hidden' in field.controlparams,'"value_hidden":'+JSON.stringify(field.controlparams.value_hidden)+',') %>
          <%-xejs.iif('popup_copy_results' in field.controlparams,'"popup_copy_results":'+JSON.stringify(field.controlparams.popup_copy_results)+',') %>
          <%-xejs.iif('base_readonly' in field.controlparams,'"base_readonly":'+JSON.stringify(field.controlparams.base_readonly)+',') %>
          <%-xejs.iif('onpopup' in field.controlparams,'"onpopup":function(popupmodelid, parentmodelid, fieldid, onComplete){'+jslocals+field.controlparams.onpopup+'},') %>
          <%-xejs.iif('dateformat' in field.controlparams,'"dateformat":'+JSON.stringify(field.controlparams.dateformat)+',') %>
          <%-xejs.iif('update_when_blank' in field.controlparams,'"update_when_blank":'+JSON.stringify(field.controlparams.update_when_blank)+',') %>
          <%-xejs.iif('htmlarea_config' in field.controlparams,'"htmlarea_config":'+JSON.stringify(field.controlparams.htmlarea_config)+',') %>
          <%-xejs.iif('select_link' in field.controlparams,'"select_link":'+JSON.stringify(field.controlparams.select_link)+',') %>
          <%-xejs.iif('placeholder' in field.controlparams,'"placeholder":'+JSON.stringify(field.controlparams.placeholder)+',') %>
        <% }%>
      },
      <% if(field.lov && field.lov.parent){ %>"lovparent":<%-JSON.stringify(field.lov.parent)%>, <% } %>
      <% if(field.lov && field.lov.parents){ %>"lovparents":<%-JSON.stringify(field.lov.parents)%>, <% } %>
      <% if(field.lov && (('blank' in field.lov) && (field.lov.blank || (field.lov.blank === '')))){ %>"lovblank":1, <% } %>
      <% if(field.lov && !(field.lov.showcode)){ %>"showlovtxt":1, <% } %>
      <% if(field.validate){ %>"validate":<%-JSON.stringify(field.validate)%>, <% } %>
      }), <%});%>
  };

  xdatamodel.prototype.OnRender = XExt.XModel.OnRender(modelid);
  xdatamodel.prototype.GetValues = XExt.XModel.GetValues();
  xdatamodel.prototype.GetValue = XExt.XModel.GetValue(modelid);
  xdatamodel.prototype.HasUpdates = XExt.XModel.HasUpdates();
  xdatamodel.prototype.HasUpdate = XExt.XModel.HasUpdate();
  xdatamodel.prototype.OnControlUpdate = XExt.XModel.OnControlUpdate(modelid);
  xdatamodel.prototype.Commit = XExt.XModel.Commit(xmodel);
  xdatamodel.prototype.BindLOV = XExt.XModel.BindLOV(modelid);
  xdatamodel.prototype.OnDBError = function(err, stats, execParams, data){
    if(xmodel.layout=='form'){
      //If result not found
      if(err.Number==-1){
        //If this is a subform
        if(xmodel.parent){
          if(!jsh.is_insert){
            xmodel.controller.form.Data = new xmodel.datamodel();
            //Do not display popup message  / default error handler
            if(execParams.onComplete) execParams.onComplete(data);
            return false;
          }
        }
      }
    }
  }
  jsh.on('jsh_ready', function(){ xdatamodel.prototype.BindLOV(xmodel.controller.form); });

  xdatamodel.prototype.xvalidate = new XValidate(jsh);
  _.each(xmodel.fields, function(field){
    if(jsh.is_insert && !xmodel.topmost && xmodel.bindings && (field.name in xmodel.bindings)) return;
    _.each(field.validate, function(validator){
      var vfuncs = [];
      _.each(validator.funcs, function(vfunc){ vfuncs.push(eval(vfunc)); });
      xdatamodel.prototype.xvalidate.AddControlValidator(
        ('selector' in validator)?validator.selector:'.'+field.name+'.xelem'+xmodel.class,
        '_obj.'+field.name,
        validator.caption,
        validator.actions,
        vfuncs
      );
    });
  });

})(<%-instance%>);