/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/
<% if(model.sample_data) return; %>

(function(jsh){
  var _ = jsh._;
  var $ = jsh.$;
  var XExt = jsh.XExt;
  var moment = jsh.moment;
  var modelid = '<%=model.id%>';
  var xmodel = jsh.XModels[modelid];
  var current_display_layout = undefined;
  var xcontroller = xmodel.controller = new XExt.XModel.XController(xmodel);
  var xsearch = null;
  var xeditablegrid = null;
  var xgrid = null;
  var xform = null;
  var gridCustomTemplate = <%=!!model.templates.grid%>;

  xcontroller.Init = function(callback){
    xsearch = xcontroller.search = new jsh.XForm({
      TemplateID: '.xsearch_template_'+xmodel.class,
      PlaceholderID: '.xsearch_'+xmodel.class,
    });
    xsearch.Data = new jsh.XSearch.SearchQuery(xmodel);
    xsearch.OnAfterRender = function(){ 
      jsh.$root('.xsearch_'+xmodel.class+' input.xsearch_value').each(function(){ jsh.XBarcode.EnableScanner($(this)); }); 
      jsh.$root('.xsearch_'+xmodel.class+' input.xsearch_value.datepicker').each(function(){ 
        $(this).datepicker({ constrainInput: false, changeMonth: true, changeYear: true, dateFormat: jsh.DEFAULT_DATEFORMAT });
      }); 
    };
    xcontroller.SearchAddDefault();
    <% if(model.grid_expand_search){ %>xcontroller.SearchExpand(0);<% } %>

    current_display_layout = xcontroller.GetDefaultDisplayLayout();

    xform = xcontroller.form = new jsh.XForm({
      modelid: modelid,
      API: (xmodel.getapi ? xmodel.getapi('form') : undefined),
    });
    xform.DataType = xmodel.datamodel;
    xform.Data = new xmodel.datamodel();

    var isInlinePopup = <%-xejs.iif(('inlinepopup' in model) && (model.inlinepopup),'true','false')%>;
    var grid_template = '<%=(model.templates.grid||'.xgrid_'+model.class+'_template')%>';
    var grid_placeholder = jsh.$root(grid_template).data('target');
    if(!grid_placeholder) throw new Error('Grid render target is required for custom template.  Add "data-target" attribute to template script tag');
    var scrollControl = (isInlinePopup ? jsh.$root(grid_placeholder).closest('.xpanel')[0] : window);
    xgrid = xcontroller.grid = new jsh.XGrid({
      modelid: modelid,
      TemplateID: grid_template,
      PlaceholderID: grid_placeholder,
      CustomScroll: undefined,
      Paging: true,
      ScrollControl: scrollControl,
      API: (xmodel.getapi ? xmodel.getapi('grid') : undefined),
    });
    xgrid.NoResultsMessage = jsh.XExt.renderEJS(<%-JSON.stringify(xejs.iif(('noresultsmessage' in model) && (model.noresultsmessage || (model.noresultsmessage==='')),model.noresultsmessage,'No results %%%FORSEARCHPHRASE%%%'))%>, modelid);
    <% if(!('noresultsmessage' in model)){ %>
    if(xmodel.caption && xmodel.caption[2]){
      if(XExt.hasAction(xmodel.actions, 'I') && xmodel.commitlevel && (xmodel.commitlevel != 'none')){
        xgrid.NoDataMessage = '<a href="#" class="xgrid_norecords" onclick="<%-js('xmodel.controller.AddRow();')%>"><img src="<%-jsh._PUBLICURL%>images/icon_insert.png" alt="Add" title="Add" />Add ' + xmodel.caption[1] + '</a>';
      }
      else {
        xgrid.NoDataMessage = 'No ' + xmodel.caption[2];
      }
    }
    <% } %>
    <% if(typeof model.sort != 'undefined'){ for(var i=0;i<model.sort.length;i++){ %> 
      xgrid.Sort.push('<%-model.sort[i]%>');
    <% } } %>
    xgrid.HasUpdates = function(){ if(this.RowCount==0) return false; return xform.HasUpdates(); };
    xgrid.Data = {};
    //Extended xData
    xgrid.Prop.ReselectAfterEdit = <%-xejs.iif(('reselectafteredit' in model) && (model.reselectafteredit),'true','false')%>;
    xgrid.Prop.NewRowPosition = '<%-xejs.iif('newrowposition' in model,model.newrowposition,'first')%>';
    xgrid.Prop.ModifiedSinceLoad = false;
    xgrid.Prop.Enabled = (isInlinePopup ? false : true);
    xgrid.Prop.isInlinePopup = isInlinePopup;
    xgrid.RequireSearch = <%-xejs.iif(model.grid_require_search,'true','false')%>;;
    xgrid.GetDBRowCount = <%-xejs.iif(('grid_rowcount' in model) && (model.grid_rowcount),'true','false')%>;

    <% if(!model.templates.grid && !model.grid_static){ %>
      xeditablegrid = xcontroller.editablegrid = new jsh.XEditableGrid({
        modelid: modelid,
        CommitLevel: xmodel.commitlevel,
        ValidationLevel: '<%-xejs.iif('validationlevel' in model,model.validationlevel,'row')%>',
        DialogContainer: jsh.XExt.getDialogContainer(grid_placeholder),
      });
      xeditablegrid.OnRowEnter = function(rowid){ xform.SetIndex(rowid,false); }
      xeditablegrid.OnControlUpdate = function(obj,e){ xform.Data.OnControlUpdate(obj,e); }
      xeditablegrid.OnValidating = function(rowid,obj){ return xform.CommitRow(); }
      xeditablegrid.IsDirty = function(){ return xform.IsDirty; }
      xeditablegrid.GetDatasetRowID = function(){ return xform.Index; }
      xeditablegrid.OnCommit = xcontroller.OnCommit;
      xeditablegrid.OnCancelEdit = function(rowid,obj){ xcontroller.ResetRow(rowid); }
      xeditablegrid.SaveBeforeUpdate = <%=(parentfield && parentfield.controlparams && parentfield.controlparams.grid_save_before_update?'true':'false')%>;
    <% } %>

    xgrid.OnRowBind = function(jobj,datarow,readonly){
      if(!xeditablegrid) return;
      if(!readonly) xeditablegrid.BindRow(jobj,datarow);
      xmodel.datamodel.prototype.BindLOV(xform,jobj);
      if(xmodel.onrowbind) xmodel.onrowbind(xmodel,jobj,datarow);
    };
    xgrid.OnDestroyingRows = function(jobj){
      if(!xeditablegrid) return;
      jobj.filter('tr[data-id]').each(function(){
        var jobj = $(this);
        if(xmodel.onrowunbind) xmodel.onrowunbind(xmodel,jobj,jobj.data('id'));
      });
    }
    xgrid.OnMetaData = function(data){ xform.LOVs = this.LOVs; xform.defaults = this.defaults; xform.title = this.title; }
    xgrid.OnDBRowCount = function(data){ xcontroller.UpdateTitleCaption(); };
    xgrid.OnResetDataSet = function(data){
      xform.DataSet = []; xform.ResetDirty();
      if (data[this.modelid].length <= 0){ xform.Index = -1; }
      else{ xform.Index = 0; }
      this.Prop.ModifiedSinceLoad = false;
      xcontroller.UpdateDisplayLayoutColumnHeaders();
    }
    xgrid.OnRender = function(ejssource,data,cb){
      var _this = this;
      xform.DataSet = xform.DataSet.concat(data[_this.modelid]);
      for (var i = 0; i < data[_this.modelid].length; i++) {
        var rowid = _this.RowCount + i;
        xform.DataSet[rowid]._is_insert = false;
        xform.DataSet[rowid]._is_dirty = false;
        xform.DataSet[rowid]._is_deleted = false;
        xform.DataSet[rowid]._orig = null;
        xform.DataSet[rowid]._previous_values = {};
        xform.ApplyUnboundDefaults(xform.DataSet[rowid]);
      }
      jsh.async.waterfall([
        function(render_cb){
          if(xeditablegrid){
            var ejsrslt = jsh.XExt.renderEJS(ejssource, modelid, {
              startrowid: _this.RowCount,
              datatable: data[_this.modelid],
            });
            var jparent = jsh.$root(_this.PlaceholderID);
            var jobj = $(ejsrslt).appendTo(jparent);

            //Get an array of all rows by id
            var jrows = {};
            var numChildren = jparent[0].childNodes.length
            for(var i=0;i<numChildren;i++){
              var child = jparent[0].childNodes[i];
              if(child.nodeName.toLowerCase()=='tr'){
                var rowid = parseInt(child.getAttribute('data-id'));
                if(!isNaN(rowid)) jrows[rowid] = child;
              }
            }

            var readOnlyGrid = !jsh.XExt.hasAction(xmodel.actions,'IU');

            var rowidx = 0;
            jsh.async.eachSeries(data[_this.modelid], function(row, row_cb){
              var rowid = _this.RowCount + rowidx;
              xform.SetIndex(rowid, false, $(jrows[rowid]));
              xform.Render({ resetValidation: false });
              _this.OnRowBind($(jrows[rowid]), row, readOnlyGrid);
              rowidx++;
              if(jsh.init_complete) return row_cb();
              else setTimeout(row_cb, 0);
            }, render_cb);
          }
          else {
            var ejsrslt = jsh.XExt.renderEJS(ejssource, modelid, {
              startrowid: _this.RowCount,
              datatable: data[_this.modelid],
            });
            var jobj = $(ejsrslt).appendTo(jsh.$root(_this.PlaceholderID));
            return render_cb();
          }
        },
      ], function(err){
        $.colorbox.resize();
        _this.RowCount += data[_this.modelid].length;
        if(cb) return cb();
      });
    }
    xgrid.OnLoadMoreData = function(){
      if(this.Prop.ModifiedSinceLoad){ this.Select(); return; }
      this.Load(this.RowCount);
    }

    xform.xData = xgrid;
    xgrid.State.Search = xsearch.Data.Items;
    if(xmodel.default_search) xgrid.SearchJSON = JSON.stringify(xsearch.Data.Items);
    xgrid.State.Sort = xgrid.Sort;
    <%=xejs.iif(('disableautoload' in model) && (model.disableautoload),'xgrid.AutoLoadMore = false;') %>
    xgrid.OnBeforeSelect = function(){
      var has_search_items = xcontroller.HasSearchItems(this.SearchJSON);
      if(has_search_items){ 
        jsh.$root('.xsearchbutton<%=model.class%> span').html('Reset Search');
      }
      else{
        jsh.$root('.xsearchbutton<%=model.class%> span').html('Search');
      }
      xcontroller.UpdateTitleCaption();
    };
    xgrid.Select = function(done){
      //Get current number of pages
      if(!xgrid.Prop.Enabled){ if(done) done(); return;}
      var loadobj = "XFORM"+modelid;
      var init_rowcount = xgrid.RowCount;
      var init_scroll = $(window).scrollTop();
      jsh.xLoader.StartLoading(loadobj);
      var load_complete = false;
      //Load all pages
      for(var fieldname in xmodel.bindings){
        var bindval = xmodel.bindings[fieldname]();
        if(typeof bindval === 'undefined') delete xgrid.Data[fieldname];
        else if(bindval === '') delete xgrid.Data[fieldname];
        else xgrid.Data[fieldname] = bindval;
      }

      //Pass parameters from querystring
      if(!xmodel.inlinepopup){
        for(var fieldname in xmodel.fields){
          if(xmodel.fields[fieldname].unbound) continue;
          if((fieldname in jsh._GET) && !(fieldname in xgrid.Data) && (xmodel.constant_bindings.indexOf(fieldname)<0) && jsh.XExt.isFieldTopmost(modelid, fieldname)){
            var fieldval = jsh._GET[fieldname];
            if((typeof fieldval !== 'undefined') && (fieldval !== null)){
              xgrid.Data[fieldname] = fieldval;
            }
          }
        }
      }

      if(jsh.is_browse) xgrid.Data._action = 'browse';
      else if(!jsh.is_insert || isInlinePopup || !XExt.hasAction(xmodel.actions, 'I')) delete xgrid.Data._action;
      else xgrid.Data._action = 'insert';

      var check_load_complete = function(){
        if(!xgrid) return;
        load_complete = (xgrid.EOF || (xgrid.RowCount >= init_rowcount));
        if(load_complete){ 
          //Move scrollbar
          $(window).scrollTop(init_scroll);
          //Remove loading animation
          jsh.xLoader.StopLoading(loadobj); 
          if(done) done(); 
        }
        else xgrid.Load(xgrid.RowCount,undefined,check_load_complete);
      };
      xgrid.GetMeta = true;
      xgrid.Load(undefined,undefined,check_load_complete);
    };

    xform.GetSelectParams = function(){
      var rslt = new Object();
      if(!jsh.is_insert || isInlinePopup){
        for(var fieldname in xmodel.bindings){
          rslt[fieldname] = xmodel.bindings[fieldname]();
        }
      }
      else{
        rslt._action = 'insert';
      }
      return rslt; 
    };
    xform.GetReselectParams = function(){
      var rslt = this.GetKeys();
      //Add bindings for codes
      for(var fieldname in xmodel.bindings){
        rslt[fieldname] = xmodel.bindings[fieldname]();
      }
      return rslt;
    };
    xform.GetDeleteParams = function(){
      var rslt = _.extend(this.GetFieldParams('D'), this.GetKeys());
      //Add bindings for codes
      for(var fieldname in xmodel.bindings){
        if(fieldname in rslt) rslt[fieldname] = xmodel.bindings[fieldname]();
      }
      return rslt;
    };
    //    return _.extend(this.GetFieldParams('D'), this.GetKeys()); 
    xform.GetKeys = function(){
      var rslt = new Object();
      if(!jsh.is_insert){
        for(var fieldname in xmodel.bindings){
          xform.Data[fieldname] = xmodel.bindings[fieldname]();
        }
        <% xejs.eachKey(model.fields,function(field){ if(!field.name) return; %>rslt.<%=field['name']%> = this.Data.<%=field['name']%>;<%}); %>
      }
      else{
        for(var fieldname in xmodel.bindings){
          rslt[fieldname] = '%%%'+fieldname+'%%%';
        }
      }
      return rslt; 
    };

    xcontroller.UpdateTitleCaption();

    //Enable Display Layouts Context Menu
    if(xmodel.display_layouts){
      jsh.$root('.xform<%=model.class%> th').contextmenu(function (e) {
        if (!$(this).hasClass('static')){
          e.preventDefault();
          e.stopPropagation();
          var field_name = $(this).closest('th').data('field');
          XExt.ShowContextMenu('.xgrid_column_header_context_<%= model.class%>', field_name);
        }
      });
    }

    callback();
  }

  xcontroller.OnDestroy = function(){
    if(!xeditablegrid) return;
    jsh.$root(xgrid.PlaceholderID).find("tr[data-id]").each(function(){
      var jobj = $(this);
      if(xmodel.onrowunbind) xmodel.onrowunbind(xmodel,jobj,jobj.data('id'));
    });
  }

  xcontroller.OnCommit = function(rowid,obj,onsuccess,oncancel){
    var dbtasks = xform.PrepSaveDataSet();
    
    xform.ExecuteTrans(dbtasks,function(rslt){
      //On Success
      xgrid.Prop.ModifiedSinceLoad = true;
      //Merge back results
      if('_success' in rslt){
        var dbrsltsuffix = '_'+modelid;
        for(var dbrslt in rslt){
          if(XExt.endsWith(dbrslt,dbrsltsuffix)){
            var taskidx = dbrslt.substr(0,dbrslt.length - dbrsltsuffix.length);
            var dbtaskid = 'insert_'+taskidx;
            if(dbtaskid in xform.DBTaskRows){
              var dbrowid = xform.DBTaskRows[dbtaskid];
              var dbdata = rslt[dbrslt];
              xform.DataSet[dbrowid] = _.extend(xform.DataSet[xform.Index], dbdata);
              xmodel.saveUnboundFields(xform.DataSet[dbrowid]);
              if(xform.Index == dbrowid) xform.Data = _.extend(xform.Data, dbdata);

              //Render keys
              for(var key in dbdata){
                if(key in xform.Data.Fields){
                  XExt.XModel.RenderField(
                    xform.DataSet[dbrowid],
                    jsh.$root(xgrid.PlaceholderID).find("tr[data-id='" + dbrowid + "']"), 
                    xmodel.id, 
                    xform.Data.Fields[key],
                    xform.DataSet[dbrowid][key],
                    { updatePreviousValue: false }
                  );
                }
              }
            }
          }
        }
      }

      //Reset password fields after commit
      _.each(xmodel.fields, function(field){
        if((field.control=='password') && !(field.controlparams && field.controlparams.update_when_blank) && (!XExt.hasAction(field.actions,'B')||field.unbound)){
          _.each(xform.DataSet,function(dbrow){ dbrow[field.name] = ''; });
          XExt.setFormField(xmodel.controller.form, field.name, '');
          if(field.unbound && field.name && xmodel.unbound_data){
            for(var key in xmodel.unbound_data){
              if(field.name in xmodel.unbound_data[key]) xmodel.unbound_data[key][field.name] = '';
            }
          }
        }
      });

      xform.ResetDirty();

      //Bind oncommit handler if defined
      var orig_onsuccess = onsuccess || function(){};
      if(xmodel.oncommit) onsuccess = function(){ xmodel.oncommit(xmodel, rowid, orig_onsuccess); };
      
      if(xgrid.Prop.ReselectAfterEdit) xcontroller.Reselect(rowid,onsuccess);
      else if(onsuccess) onsuccess();

    },function(data, handled){
      //On Fail
      if(xform.Data._jrow){
        $(xform.Data._jrow).find('.xform_ctrl').addClass(xmodel.datamodel.prototype.xvalidate.ErrorClass);
      }
      if(oncancel) oncancel(false);
      if(!handled){
        if(data && data.Message) jsh.XExt.Alert((data.Number && ('Error #' + data.Number + ': ')) + data.Message)
        else if(data && ('responseText' in data)) XExt.Alert('An error has occurred: ' + data.responseText);
        else XExt.Alert('An unexpected error has occurred');
      }
      return true; //Error handled
    });
    return false;
  }

  xcontroller.Reselect = function(rowid,oncomplete,onfail){
    if(!xeditablegrid) return;
    if(rowid < 0){ XExt.Alert('Invalid Reselect Row ID'); return; }
    var _this = xform;
    
    if(rowid != _this.Index) if(!_this.SetIndex(rowid,true)) return;

    var reqdata = { rowstart: 0, rowcount: 1, d: JSON.stringify(_this.GetReselectParams()) };
    var loadObj = {};
    if(jsh.xLoader) jsh.xLoader.StartLoading(loadObj);
    xgrid.API.Select(reqdata, function(errdata, rslt){
      if(jsh.xLoader) jsh.xLoader.StopLoading(loadObj);

      if(errdata) return xgrid.API.HandleGenericError(errdata);

      //Success
      if('_success' in rslt){
        if((_this.modelid in rslt) && (rslt[_this.modelid].length > 0)){
          _this.DataSet[rowid] = _.extend(_this.DataSet[rowid],rslt[_this.modelid][0]);
          _this.DataSet[rowid]._is_insert = false;
          _this.DataSet[rowid]._is_dirty = false;
          _this.DataSet[rowid]._orig = null;
          _this.DataSet[rowid]._previous_values = {};
          _this.ApplyUnboundDefaults(_this.DataSet[rowid]);

          var ejssource = jsh.$root(xgrid.TemplateID).html();
          var ejsrslt = jsh.XExt.renderEJS(ejssource, modelid, {
            startrowid: rowid,
            datatable: [_this.DataSet[rowid]], 
          });
          var jobj = jsh.$root(xgrid.PlaceholderID).find("tr[data-id='" + rowid + "']");
          if(xmodel.onrowunbind) xmodel.onrowunbind(xmodel,jobj,rowid);
          jobj.replaceWith($(ejsrslt));
          jobj = jsh.$root(xgrid.PlaceholderID).find("tr[data-id='" + rowid + "']");
          _this.SetIndex(rowid,false);
          _this.Render();
          xgrid.OnRowBind(jobj, _this.DataSet[rowid]);
        }
        if(oncomplete) oncomplete();
      }
      else if(onfail) onfail(err);
    });
  }

  xcontroller.GetRowID = function(){
    var rowid = -1;
    if(xeditablegrid.CurrentCell) rowid = XExt.XModel.GetRowID(modelid,xeditablegrid.CurrentCell);
    return rowid;
  }

  xcontroller.ResetRow = function(rowid){
    if(!xeditablegrid) return;

    var oldrowid = xcontroller.GetRowID();

    //Get Data, if data is new, delete row from both grid and ...
    if(xform.DataSet[rowid]._is_insert) return xcontroller.DeleteRow(rowid);
    //If HasChanges
    if(oldrowid == rowid){ 
      if(xform.Data._orig != null) xform.Data = _.extend(xform.Data, xform.Data._orig);
      xform.Data._orig = null;
      xform.Data._is_dirty = false;
      xform.Data._previous_values = {};
      xform.DataSet[rowid] = _.extend(xform.DataSet[rowid], xform.Data);
      xform.Render();
    }
    else{
      if(xform.DataSet[rowid]._orig != null){

      }
    }
    xform.RecheckDirty();

    //Undo Changes
    //
  }

  xcontroller.NavTo = function(rowid, onSelected){
    if(!xeditablegrid) return;

    var oldrowid = xcontroller.GetRowID();
    if(oldrowid == rowid){
      if(onSelected) onSelected();
      return;
    }

    if(xeditablegrid.CurrentCell) if(!xform.CommitRow()) return;
    //Save parent and other items before adding, if commitlevel is row or cell
    if(xeditablegrid.SaveBeforeUpdate && ((xmodel.commitlevel == 'row') || (xmodel.commitlevel == 'cell'))){
      if (jsh.XPage.GetChanges().length > 0) { return XExt.Alert('Please save all changes before navigating to another row.'); }
    }
    
    xform.NavTo(rowid,false);
    var jobj = jsh.$root(xgrid.PlaceholderID).find("tr[data-id='" + rowid + "']");
    var newobj = $(jobj).find('.xform_ctrl.editable:visible,.xlookup:visible').not('input[type=hidden]').first();
    if(newobj.length){
      if(xeditablegrid.IsContainerActive()){
        xeditablegrid.SetFocus(newobj[0], null, function(){
          if(onSelected) onSelected();
        });
      }
      else {
        if(onSelected) onSelected();
      }
    }
    else return XExt.Alert('No selectable element found in grid row');
  }

  xcontroller.AddRow = function(){
    if(!xeditablegrid) return;
    if(xeditablegrid.CurrentCell) if(!xform.CommitRow()) return;
    //Save parent and other items before adding, if commitlevel is row or cell
    if(xeditablegrid.SaveBeforeUpdate && ((xmodel.commitlevel == 'row') || (xmodel.commitlevel == 'cell'))){
      if (jsh.XPage.GetChanges().length > 0) { XExt.Alert('Please save all changes before adding a row.'); return; }
    }
    
    var newrow = xform.NewRow();
    
    xgrid.RowCount++;
    var rowid = xgrid.RowCount-1;
    xgrid.Prop.ModifiedSinceLoad = true;
    
    var ejssource = "";
    if (xgrid.TemplateHTMLFunc != null) ejssource = xgrid.TemplateHTMLFunc(data, xgrid.RowCount);
    else ejssource = jsh.$root(xgrid.TemplateID).html();
    var ejsrslt = XExt.renderEJS(ejssource, modelid, {
      startrowid: rowid,
      datatable: [newrow],
    });

    var jobj;
    if(jsh.$root(xgrid.PlaceholderID).find('tr.xtbl_noresults').length){ jsh.$root(xgrid.PlaceholderID).find('tr.xtbl_noresults').remove(); }
    if(xgrid.Prop.NewRowPosition=='first'){
      jobj = $(ejsrslt).prependTo(jsh.$root(xgrid.PlaceholderID));
    }
    else if(jsh.$root(xgrid.PlaceholderID).find('.xtbl_loadmore').length){
      //Prepend
      jobj = $(ejsrslt).insertBefore(jsh.$root(xgrid.PlaceholderID).find('.xtbl_loadmore'));
    }
    else {
      jobj = $(ejsrslt).appendTo(jsh.$root(xgrid.PlaceholderID));
    }

    var oldindex = xform.Index;
    xform.NavTo(rowid,false);
    var newobj = $(jobj).find('.xform_ctrl.editable:visible,.xlookup:visible').not('input[type=hidden]').first();
    if(newobj.find('.xform_ctrl_subfocus').length) newobj = newobj.find('.xform_ctrl_subfocus').first();
    newobj.focus();
    if(xgrid.OnRowBind) xgrid.OnRowBind(jobj, newrow);
    newobj.focus();
    if(newobj.length) xeditablegrid.CurrentCell = newobj[0];
    else xeditablegrid.CurrentCell = document.activeElement;
    return rowid;
  }

  xcontroller.GetKeys = function(rowid){
    var rowdata = xform.DataSet[rowid];
    if(!rowdata) throw new Error('Row not found');
    var rslt = {};
    for(var fieldname in xmodel.fields){
      var field = xmodel.fields[fieldname];
      if(field.key) rslt[fieldname] = rowdata[fieldname];
    }
    return rslt;
  }

  xcontroller.DownloadFile = function(field, title, rowid){
    var jrow = jsh.$root(xgrid.PlaceholderID).find("tr[data-id='" + rowid + "']");
    var jctrl_token = jrow.find('.xelem' + xmodel.class + ' .' + field + '_token');
    var file_token = jctrl_token.val();
    var url = '';
    if (file_token) url = jsh._BASEURL + '_dl/_temp/' + file_token;
    else {
      //Get Keys
      var keys = this.GetKeys(rowid);
      var key_names = _.keys(keys);
      if (key_names.length != 1) { throw new Error('Models with file downloads must have one key.'); }
      url = jsh._BASEURL + '_dl/' + modelid + '/' + keys[key_names[0]] + '/' + field;
    }
    jsh.getFileProxy().prop('src', url);
  }

  xcontroller.FilePreview = function(field, title, rowid){
    var jrow = jsh.$root(xgrid.PlaceholderID).find("tr[data-id='" + rowid + "']");
    var jctrl_token = jrow.find('.xelem' + xmodel.class + ' .' + field + '_token');
    var file_token = jctrl_token.val();
    var url = '';
    if (file_token) url = jsh._BASEURL + '_dl/_temp/' + file_token + '?view=1';
    else {
      //Get Keys
      var keys = this.GetKeys(rowid);
      var key_names = _.keys(keys);
      if (key_names.length != 1) { throw new Error('Models with file downloads must have one key.'); }
      url = jsh._BASEURL + '_dl/' + modelid + '/' + keys[key_names[0]] + '/' + field + '?view=1';
    }
    window.open(url,'_blank',"height=600, width=800"); 
  }

  xcontroller.DuplicateRow = function(dmodelid, rowid, obj, bindings){
    dmodelid = XExt.resolveModelID(dmodelid, xmodel);
    if(jsh.XPage.HasUpdates()){ XExt.Alert('Please save changes before duplicating.'); return false; }
    var rowdata = xform.DataSet[rowid];
    for(var binding in bindings){
      if(binding in rowdata){
        jsh.XModels[dmodelid].bindings[binding] = function(){ return rowdata[binding]; };
      }
    }
    jsh.XPage.promptDuplicate(dmodelid, xmodel.class+'_duplicate','Duplicate <%=model.caption[1]%>', obj);
    return false;
  }

  xcontroller.DeleteRow = function(rowid, options){
    if(!xeditablegrid) return;
    options = _.extend({ force: false }, options);
    XExt.execif(!options.force,
      function(f){
        XExt.Confirm("Are you sure you want to delete this <%=model.caption[1]%>?",f);
      },
      function(){
        var oldrowid = xcontroller.GetRowID();

        if(oldrowid != rowid) if(!xform.CommitRow()) return;
      
        var exec_delete = function(){
          xgrid.Prop.ModifiedSinceLoad = true;
          xform.DataSet[rowid]._is_deleted = true;
          xform.DataSet[rowid]._is_insert = false;
          xform.DataSet[rowid]._is_dirty = false;
          xform.DataSet[rowid]._orig = null;
          xform.DataSet[rowid]._previous_values = {};
          var jrow = jsh.$root(xgrid.PlaceholderID).find("tr[data-id='" + rowid + "']");
          if(xmodel.onrowunbind) xmodel.onrowunbind(xmodel,jrow,rowid);
          jrow.remove();
          if(!jsh.$root(xgrid.PlaceholderID).find('tr').length) xgrid.RenderNoResultsMessage();
          xeditablegrid.CurrentCell = null;
          if(xform.Index==rowid){ 
            xform.Data._is_insert = false;
            xform.Data._is_dirty = false;
            xform.Data._orig = null;
            xform.Data._previous_values = {};
            xform.Index = -1;
            for(var i=0;i<xform.Count();i++){
              if(!xform.DataSet[i]._is_deleted){ 
                xform.SetIndex(i,false);
                break;
              }
            }
          }
          xform.RecheckDirty();
        }

        if(!(xform.DataSet[rowid]._is_insert)){
          if(!(xform.DataSet[rowid] in xform.DeleteSet)) xform.DeleteSet.push(xform.DataSet[rowid]);

          if(xmodel.commitlevel == 'page'){
            exec_delete();
          }
          else{
            var dbtasks = xform.PrepSaveDataSet(true);
            xform.ExecuteTrans(dbtasks,function(rslt){
              //On Complete
              exec_delete();
              xform.ResetDirty();
          if(xmodel.oncommit) xmodel.oncommit(xmodel, -1, function(){});
            },function(data, handled){
              //On Fail
              _.remove(xform.DeleteSet,xform.DataSet[rowid]);
              xform.RecheckDirty();
              if(!handled){
                if(data && data.Message) jsh.XExt.Alert((data.Number && ('Error #' + data.Number + ': ')) + data.Message)
                else if(data && ('responseText' in data)) XExt.Alert('An error has occurred: ' + data.responseText);
                else XExt.Alert('An unexpected error has occurred');
              }
              return true; //Error handled
            });
          }
        }
        else exec_delete();
      }
    );
  }

  xcontroller.Save = function(){
    if((xmodel.commitlevel == 'cell') ||
      (xmodel.commitlevel == 'row') ||
      (xmodel.commitlevel == 'page'))
      return xform.PrepSaveDataSet();
    return [];
  }

  xcontroller.GetState = function(){
    return xgrid.State;
  }

  xcontroller.LoadState = function(state){
    if('Sort' in state){
      xgrid.State.Sort = state.Sort;
      xgrid.Sort = state.Sort;
      xgrid.ResetSortGlyphs(jsh.$root('.xform'+xmodel.class));
    }
    if('Search' in state){
      xgrid.State.Search = state.Search;
      xsearch.Data.Items = state.Search;
      xsearch.Render();
      xgrid.SearchJSON = JSON.stringify(state.Search);
    }
    if('DisplayLayout' in state){
      current_display_layout = state.DisplayLayout;
    }
    else current_display_layout = xcontroller.GetDefaultDisplayLayout();
  }

  xcontroller.Refresh = function(callback){
    if(jsh.XPage.onGridExit(null,function(){ xcontroller.Refresh(); })) return;
    xgrid.Load(undefined,undefined,callback);
  }

  xcontroller.Sort = function(obj,fieldname){
    if(!xgrid.Prop.isInlinePopup) if(jsh.XPage.onGridExit(obj,function(){ xcontroller.Sort(obj,fieldname); })) return;
    xgrid.AddSort(obj,fieldname);
    xgrid.State.Sort = xgrid.Sort;
    jsh.XPage.AddHistory();
    return false;
  }

  xcontroller.HasSearchItems = function(val){
    var rslt = false;
    if(typeof val == 'undefined') val = xgrid.SearchJSON;
    if(val.trim() != ''){
      var sjson = JSON.parse(val);
      _.each(sjson,function(squery){
        if(squery.Value.trim() != '') rslt = true;
        if((squery.Comparison == 'null')||(squery.Comparison == 'notnull')) rslt = true; 
      });
    }
    return rslt;
  }

  xcontroller.SearchColumnChange = function(){
    xsearch.GetValues();
    xsearch.Render();
  }

  xcontroller.SearchComparisonChange = function(){
    xsearch.GetValues();
    xsearch.Render();
  }

  xcontroller.SearchJoinChange = function(){
    xsearch.GetValues();
    xsearch.Render();
  }

  xcontroller.SearchExpand = function(timeout){
    if(jsh.$root('.xsearch_'+xmodel.class).is(':visible')) return;
    var selectFirstSearchInput = function(){
      jsh.$root('.xsearch_'+xmodel.class+' .xsearch_value').first().select().focus();
    }
    if(xsearch.Data.Items.length == 0){
      xcontroller.SearchAddDefault();
      jsh.$root('.xsearch_'+xmodel.class).slideDown(timeout,function(){ selectFirstSearchInput(); });
    }
    else {
      jsh.$root('.xsearch_'+xmodel.class).slideDown(timeout,function(){ selectFirstSearchInput(); });
    }
  }

  xcontroller.SearchButtonClick = function(){
    if(jsh.$root('.xsearchbutton'+xmodel.class+' span').html()=='Reset Search'){
      xsearch.Data.Items = [];
      xsearch.Render();
      jsh.$root('.xsearch_'+xmodel.class).hide();
      xcontroller.SearchExpand(400);
      xcontroller.RunSearch();
    }
    else{
      if(jsh.$root('.xsearch_'+xmodel.class).is(':visible')) jsh.$root('.xsearch_'+xmodel.class).slideUp();
      else xcontroller.SearchExpand(400);
    }
  }

  xcontroller.SearchKeyUp = function(event){
    if(event.keyCode==13) xcontroller.RunSearch();
  }

  xcontroller.SetSearch = function(searchitems,hide){
    if(hide) jsh.$root('.xsearch_'+xmodel.class).hide();
    xsearch.Data.Items = searchitems;
    xsearch.Render();
    xgrid.State.Search = searchitems;
    xgrid.SearchJSON = JSON.stringify(searchitems);
  }

  xcontroller.RunSearch = function(cb){
    if(!xgrid.Prop.isInlinePopup) if(jsh.XPage.onGridExit(null,function(){ xcontroller.RunSearch(); })) return;
    xsearch.GetValues();
    var searchitems = JSON.parse(JSON.stringify(xsearch.Data.Items));
    var has_search_items = false;
    _.each(searchitems,function(val){
      if(val.Value.trim() != '') has_search_items = true;
      if((val.Comparison == 'null')||(val.Comparison == 'notnull')) has_search_items = true;
    });
    //if (val.trim() != '')
    var sjson = '';
    if(has_search_items){
      sjson = JSON.stringify(searchitems);
    }
    xgrid.State.Search = searchitems;
    jsh.XPage.AddHistory();
    xgrid.NewSearchJSON(sjson, cb);
  }

  xcontroller.SearchAdd = function(obj){
    xsearch.GetValues();
    var newSearchItem = new jsh.XSearch.SearchItem('ALL','','and','contains');
    if(!obj || !xsearch.Data.Items.length){
      xsearch.Data.Items.push(newSearchItem);
    }
    else {
      var tgt = $(obj.target).closest('div.xsearch_expression');
      var idx = jsh.$root(xsearch.PlaceholderID).children().index(tgt);
      xsearch.Data.Items.splice(idx + 1, 0, newSearchItem);
    }
    xsearch.Render();
  }

  xcontroller.SearchAddDefault = function(){
    if('default_search' in xmodel){
      if(!_.isArray(xmodel.default_search)) xmodel.default_search = [xmodel.default_search];
      for(var i=xmodel.default_search.length-1;i>=0;i--){
        var defaultSearchItem = xmodel.default_search[i];
        xsearch.Data.Items.unshift(new jsh.XSearch.SearchItem(
          defaultSearchItem.Column||'ALL',
          XExt.isNullUndefinedEmpty(defaultSearchItem.Value)?'':defaultSearchItem.Value,
          defaultSearchItem.Join||'and',
          defaultSearchItem.Comparison||'contains'
        ));
      }
    }
    else xsearch.Data.Items.unshift(new jsh.XSearch.SearchItem('ALL','','and','contains'));
    xsearch.Render();
  }

  xcontroller.SearchRemove = function(obj){
    xsearch.GetValues();
    var tgt = $(obj.target).closest('div.xsearch_expression');
    var idx = jsh.$root(xsearch.PlaceholderID).children().index(tgt);
    xsearch.Data.Items.splice(idx,1);
    xsearch.Render();
    if(!xsearch.Data.Items.length) xcontroller.SearchAddDefault();
  }

  xcontroller.Export = function(options){
    options = _.extend({ iscsvpaste: false }, options);
    if(!xgrid.Prop.isInlinePopup) if(jsh.XPage.onGridExit(null,function(){ xcontroller.Export(); })) return;

    //Load export columns, if applicable
    var params = {};
    var currentDisplayLayout = xcontroller.GetDisplayLayout();
    if(currentDisplayLayout && _.isArray(currentDisplayLayout.columns)) {
      var exportColumns = _.reduce(currentDisplayLayout.columns, function (rslt, column) { if (column.name) rslt.push(column.name); return rslt; }, []);
      params.columns = JSON.stringify(exportColumns);
    }
    if(options.iscsvpaste) params.iscsvpaste = true;

    xgrid.Load(0,0,null,true,undefined,{ params: params });
  }

  xcontroller.UpdateTitleCaption = function(){
    var has_search_items = xcontroller.HasSearchItems(this.SearchJSON);
    var txt = '(';
    if(has_search_items) txt += 'Search';
    if((xgrid.DBRowCount == 0) && !has_search_items && xgrid.RequireSearch){}
    else if(xgrid.DBRowCount >= 0) txt += ((txt=='(')?'':' - ') + xgrid.DBRowCount.toLocaleString() + ' results';
    if(txt == '(') txt = '';
    else txt += ')';
    if(txt){
      jsh.$root('.xtitlecaption'+xmodel.class).show();
    }
    else {
      jsh.$root('.xtitlecaption'+xmodel.class).hide();
    }
    jsh.$root('.xtitlecaption'+xmodel.class+' a').text(txt);
  }
  
  xcontroller.HideColumn = function(field_name){
    if(!xgrid.Prop.isInlinePopup) if(jsh.XPage.onGridExit(null, function(){ xcontroller.HideColumn(field_name); })) return;
    var display_layout = xcontroller.GetDisplayLayout();
    if(!display_layout) return XExt.Alert('No display layout selected');
    for(var i=0; i<display_layout.columns.length; i++){
      if(display_layout.columns[i].name == field_name){
        display_layout.columns.splice(i, 1);
        i--;
      }
    }
    xcontroller.SetDisplayLayout();
  }

  xcontroller.SetDisplayLayout = function(display_layout) {
    if(!display_layout) display_layout = xcontroller.GetDisplayLayout();
    current_display_layout = display_layout;
    xcontroller.Refresh();
    xgrid.State.DisplayLayout = display_layout;
    jsh.XPage.AddHistory();
  }

  xcontroller.UpdateDisplayLayoutColumnHeaders = function(){
    var display_layout = xcontroller.GetDisplayLayout();
    jsh.$('.xform<%=model.class%> th').not('.static').each(function () {
      var field_name= $(this).data('field');
      if(field_name && XExt.isDisplayLayoutColumnHidden(field_name, display_layout, xmodel.fields)){
        jsh.$('.xform<%=model.class%> th.thead'+field_name).addClass('tdhidden');
      }
      else {
        jsh.$('.xform<%=model.class%> th.thead'+field_name).removeClass('tdhidden');
      }
    });
  }

  xcontroller.GetDisplayLayout = function(){
    if(!xmodel.display_layouts) return undefined;
    return current_display_layout;
  }

  xcontroller.GetDefaultDisplayLayout = function(){
    if(xmodel.display_layouts && xmodel.current_display_layout_name){
      return JSON.parse(JSON.stringify(xmodel.display_layouts[xmodel.current_display_layout_name]));
    }
    return undefined;
  }

  xcontroller.ManageColumns = function(){
    if(!xgrid.Prop.isInlinePopup) if(jsh.XPage.onGridExit(null, function(){ xcontroller.ManageColumns(); })) return;
    var html = jsh.$root('.xgrid_template_manage_columns_'+xmodel.class).html();
    html = XExt.renderEJS(html, modelid);
    var sel = '.xgrid_manage_columns_'+xmodel.class;
    XExt.CustomPrompt(sel, html, function () { //onInit
    }, function (success) { //onAccept
      var column_checkboxes = jsh.$(sel + ' .display_layout_columns input');
      var columns = [];
      _.each(column_checkboxes, function(column_checkbox){
        var jobj = $(column_checkbox);
        if(jobj.prop('checked')) {
          columns.push( {name:jobj.val()});
        }
      });
      xcontroller.SetDisplayLayout({
        title: (current_display_layout ? current_display_layout.title: ''),
        columns: columns
      });
      success();
    });
  }

  xcontroller.Render = function(callback){
    this.Select(function(){
      if (typeof xmodel.onload != 'undefined') if(xmodel.onload(xmodel, callback) === false) return;
      jsh.ResetLinks();
      if(callback) callback();
    });
  }

  xcontroller.getLOV = function(fieldname){
    if(!xform.Data._LOVs) xform.Data._LOVs = {};
    return xform.Data._LOVs[fieldname];
  }

  xcontroller.setLOV = function(fieldname, lov_data){
    if(!xform.Data._LOVs) xform.Data._LOVs = {};
    xform.Data._LOVs[fieldname] = lov_data;
    xform.LOVs = xform.Data._LOVs;
    xgrid.LOVs[fieldname] = lov_data;
  }

  xcontroller.Commit = function(onSuccess){
    if(!xform.CommitRow()) return;
    this.OnCommit(xcontroller.GetRowID(), undefined, onSuccess);
  }

})(<%-instance%>);

<%-jsh.RenderView('jsh_grid.js.datamodel',ejsparams)%>